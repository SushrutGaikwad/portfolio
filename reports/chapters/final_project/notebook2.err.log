Traceback (most recent call last):
  File "D:\projects\jupyter-book\venv\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "D:\projects\jupyter-book\venv\Lib\site-packages\nbclient\client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\projects\jupyter-book\venv\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\projects\jupyter-book\venv\Lib\asyncio\base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "D:\projects\jupyter-book\venv\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "D:\projects\jupyter-book\venv\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "D:\projects\jupyter-book\venv\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
raw_data_path = "data\\raw\\adult.csv"
normalized_db_path = "data\\normalized\\normalized.db"

def create_and_populate_database(raw_data_path, normalized_db_path):
    # Connect to SQLite database
    conn = sqlite3.connect(normalized_db_path)
    cursor = conn.cursor()
    
    # Create normalized tables
    cursor.execute("CREATE TABLE IF NOT EXISTS workclass (id INTEGER PRIMARY KEY, name TEXT UNIQUE)")
    cursor.execute("CREATE TABLE IF NOT EXISTS education (id INTEGER PRIMARY KEY, name TEXT UNIQUE)")
    cursor.execute("CREATE TABLE IF NOT EXISTS marital_status (id INTEGER PRIMARY KEY, name TEXT UNIQUE)")
    cursor.execute("CREATE TABLE IF NOT EXISTS occupation (id INTEGER PRIMARY KEY, name TEXT UNIQUE)")
    cursor.execute("CREATE TABLE IF NOT EXISTS relationship (id INTEGER PRIMARY KEY, name TEXT UNIQUE)")
    cursor.execute("CREATE TABLE IF NOT EXISTS race (id INTEGER PRIMARY KEY, name TEXT UNIQUE)")
    cursor.execute("CREATE TABLE IF NOT EXISTS gender (id INTEGER PRIMARY KEY, name TEXT UNIQUE)")
    cursor.execute("CREATE TABLE IF NOT EXISTS native_country (id INTEGER PRIMARY KEY, name TEXT UNIQUE)")
    cursor.execute("CREATE TABLE IF NOT EXISTS income (id INTEGER PRIMARY KEY, name TEXT UNIQUE)")
    
    # Create `main_data` table with foreign keys
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS main_data (
            id INTEGER PRIMARY KEY,
            age INTEGER,
            workclass_id INTEGER,
            fnlwgt INTEGER,
            education_id INTEGER,
            educational_num INTEGER,
            marital_status_id INTEGER,
            occupation_id INTEGER,
            relationship_id INTEGER,
            race_id INTEGER,
            gender_id INTEGER,
            capital_gain INTEGER,
            capital_loss INTEGER,
            hours_per_week INTEGER,
            native_country_id INTEGER,
            income_id INTEGER,
            FOREIGN KEY (workclass_id) REFERENCES workclass (id),
            FOREIGN KEY (education_id) REFERENCES education (id),
            FOREIGN KEY (marital_status_id) REFERENCES marital_status (id),
            FOREIGN KEY (occupation_id) REFERENCES occupation (id),
            FOREIGN KEY (relationship_id) REFERENCES relationship (id),
            FOREIGN KEY (race_id) REFERENCES race (id),
            FOREIGN KEY (gender_id) REFERENCES gender (id),
            FOREIGN KEY (native_country_id) REFERENCES native_country (id),
            FOREIGN KEY (income_id) REFERENCES income (id)
        )
    """)
    
    # Read data from CSV
    with open(raw_data_path, 'r') as infile:
        reader = csv.DictReader(infile)
        
        # Helper function to insert into normalized tables and get IDs
        def get_or_insert(table, name):
            cursor.execute(f"INSERT OR IGNORE INTO {table} (name) VALUES (?)", (name,))
            cursor.execute(f"SELECT id FROM {table} WHERE name = ?", (name,))
            return cursor.fetchone()[0]
        
        # Insert data into normalized tables and `main_data`
        for row in reader:
            workclass_id = get_or_insert('workclass', row['workclass'])
            education_id = get_or_insert('education', row['education'])
            marital_status_id = get_or_insert('marital_status', row['marital-status'])
            occupation_id = get_or_insert('occupation', row['occupation'])
            relationship_id = get_or_insert('relationship', row['relationship'])
            race_id = get_or_insert('race', row['race'])
            gender_id = get_or_insert('gender', row['gender'])
            native_country_id = get_or_insert('native_country', row['native-country'])
            income_id = get_or_insert('income', row['income'])
            
            # Insert into main_data table
            cursor.execute("""
                INSERT INTO main_data (
                    age, workclass_id, fnlwgt, education_id, educational_num,
                    marital_status_id, occupation_id, relationship_id, race_id,
                    gender_id, capital_gain, capital_loss, hours_per_week,
                    native_country_id, income_id
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                row['age'], workclass_id, row['fnlwgt'], education_id,
                row['educational-num'], marital_status_id, occupation_id,
                relationship_id, race_id, gender_id, row['capital-gain'],
                row['capital-loss'], row['hours-per-week'], native_country_id,
                income_id
            ))

    # Commit and close the connection
    conn.commit()
    conn.close()

# Populate the SQLite database
create_and_populate_database(raw_data_path, normalized_db_path)
------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mOperationalError[0m                          Traceback (most recent call last)
Cell [1;32mIn[3], line 94[0m
[0;32m     91[0m     conn[38;5;241m.[39mclose()
[0;32m     93[0m [38;5;66;03m# Populate the SQLite database[39;00m
[1;32m---> 94[0m [43mcreate_and_populate_database[49m[43m([49m[43mraw_data_path[49m[43m,[49m[43m [49m[43mnormalized_db_path[49m[43m)[49m

Cell [1;32mIn[3], line 6[0m, in [0;36mcreate_and_populate_database[1;34m(raw_data_path, normalized_db_path)[0m
[0;32m      4[0m [38;5;28;01mdef[39;00m [38;5;21mcreate_and_populate_database[39m(raw_data_path, normalized_db_path):
[0;32m      5[0m     [38;5;66;03m# Connect to SQLite database[39;00m
[1;32m----> 6[0m     conn [38;5;241m=[39m [43msqlite3[49m[38;5;241;43m.[39;49m[43mconnect[49m[43m([49m[43mnormalized_db_path[49m[43m)[49m
[0;32m      7[0m     cursor [38;5;241m=[39m conn[38;5;241m.[39mcursor()
[0;32m      9[0m     [38;5;66;03m# Create normalized tables[39;00m

[1;31mOperationalError[0m: unable to open database file

